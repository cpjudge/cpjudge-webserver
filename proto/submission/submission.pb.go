// Code generated by protoc-gen-go. DO NOT EDIT.
// source: submission/submission.proto

package submission

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Ref: https://www.quora.com/What-is-WA-RTE-CTE-and-TLE-on-CodeChef
type SubmissionStatus int32

const (
	SubmissionStatus_TIME_LIMIT_EXCEEDED SubmissionStatus = 0
	SubmissionStatus_COMPILATION_ERROR   SubmissionStatus = 1
	SubmissionStatus_TO_BE_EVALUATED     SubmissionStatus = 2
)

var SubmissionStatus_name = map[int32]string{
	0: "TIME_LIMIT_EXCEEDED",
	1: "COMPILATION_ERROR",
	2: "TO_BE_EVALUATED",
}

var SubmissionStatus_value = map[string]int32{
	"TIME_LIMIT_EXCEEDED": 0,
	"COMPILATION_ERROR":   1,
	"TO_BE_EVALUATED":     2,
}

func (x SubmissionStatus) String() string {
	return proto.EnumName(SubmissionStatus_name, int32(x))
}

func (SubmissionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3759700a6085d8b, []int{0}
}

type Submission struct {
	TestcasesPath        string   `protobuf:"bytes,1,opt,name=testcasesPath,proto3" json:"testcasesPath,omitempty"`
	SubmissionPath       string   `protobuf:"bytes,2,opt,name=submissionPath,proto3" json:"submissionPath,omitempty"`
	Language             string   `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	SubmissionId         string   `protobuf:"bytes,4,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	UserId               string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	QuestionId           string   `protobuf:"bytes,6,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Submission) Reset()         { *m = Submission{} }
func (m *Submission) String() string { return proto.CompactTextString(m) }
func (*Submission) ProtoMessage()    {}
func (*Submission) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3759700a6085d8b, []int{0}
}

func (m *Submission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Submission.Unmarshal(m, b)
}
func (m *Submission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Submission.Marshal(b, m, deterministic)
}
func (m *Submission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Submission.Merge(m, src)
}
func (m *Submission) XXX_Size() int {
	return xxx_messageInfo_Submission.Size(m)
}
func (m *Submission) XXX_DiscardUnknown() {
	xxx_messageInfo_Submission.DiscardUnknown(m)
}

var xxx_messageInfo_Submission proto.InternalMessageInfo

func (m *Submission) GetTestcasesPath() string {
	if m != nil {
		return m.TestcasesPath
	}
	return ""
}

func (m *Submission) GetSubmissionPath() string {
	if m != nil {
		return m.SubmissionPath
	}
	return ""
}

func (m *Submission) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Submission) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

func (m *Submission) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Submission) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

type CodeStatus struct {
	CodeStatus           SubmissionStatus `protobuf:"varint,2,opt,name=code_status,json=codeStatus,proto3,enum=submission.SubmissionStatus" json:"code_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CodeStatus) Reset()         { *m = CodeStatus{} }
func (m *CodeStatus) String() string { return proto.CompactTextString(m) }
func (*CodeStatus) ProtoMessage()    {}
func (*CodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3759700a6085d8b, []int{1}
}

func (m *CodeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeStatus.Unmarshal(m, b)
}
func (m *CodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeStatus.Marshal(b, m, deterministic)
}
func (m *CodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeStatus.Merge(m, src)
}
func (m *CodeStatus) XXX_Size() int {
	return xxx_messageInfo_CodeStatus.Size(m)
}
func (m *CodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CodeStatus proto.InternalMessageInfo

func (m *CodeStatus) GetCodeStatus() SubmissionStatus {
	if m != nil {
		return m.CodeStatus
	}
	return SubmissionStatus_TIME_LIMIT_EXCEEDED
}

func init() {
	proto.RegisterEnum("submission.SubmissionStatus", SubmissionStatus_name, SubmissionStatus_value)
	proto.RegisterType((*Submission)(nil), "submission.Submission")
	proto.RegisterType((*CodeStatus)(nil), "submission.CodeStatus")
}

func init() { proto.RegisterFile("submission/submission.proto", fileDescriptor_b3759700a6085d8b) }

var fileDescriptor_b3759700a6085d8b = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4b, 0x02, 0x41,
	0x14, 0xc5, 0x5d, 0x2b, 0xad, 0x6b, 0xda, 0x76, 0xa5, 0x14, 0x0b, 0x0a, 0x8b, 0x88, 0x1e, 0x0c,
	0xec, 0xb9, 0xc0, 0x74, 0x1e, 0x86, 0xb4, 0x95, 0x75, 0xfb, 0xf3, 0x36, 0x8c, 0xce, 0x60, 0x42,
	0xed, 0x94, 0x33, 0x0b, 0x7d, 0xd1, 0xbe, 0x4f, 0xec, 0x64, 0x3b, 0x29, 0xbd, 0xed, 0xf9, 0x9d,
	0x73, 0x97, 0x33, 0xf7, 0xc2, 0x81, 0x4e, 0xc6, 0x6f, 0x33, 0xad, 0x67, 0x2a, 0xbe, 0x74, 0x9f,
	0xad, 0xf7, 0xb9, 0x32, 0x0a, 0xc1, 0x91, 0xe6, 0x97, 0x07, 0x30, 0xca, 0x24, 0x9e, 0x42, 0xd9,
	0x48, 0x6d, 0x26, 0x5c, 0x4b, 0x3d, 0xe4, 0xe6, 0xa5, 0xee, 0x1d, 0x7b, 0xe7, 0x5b, 0xe1, 0x32,
	0xc4, 0x33, 0xa8, 0xb8, 0x5f, 0xd8, 0x58, 0xde, 0xc6, 0x56, 0x28, 0x36, 0x60, 0xf3, 0x95, 0xc7,
	0xd3, 0x84, 0x4f, 0x65, 0x7d, 0xcd, 0x26, 0x32, 0x8d, 0x27, 0x50, 0x76, 0x69, 0x36, 0x13, 0xf5,
	0x75, 0x1b, 0xd8, 0x76, 0x90, 0x0a, 0xac, 0x41, 0x31, 0xd1, 0x72, 0x9e, 0xda, 0x1b, 0xd6, 0x2e,
	0xa4, 0x92, 0x0a, 0x3c, 0x82, 0xd2, 0x47, 0x22, 0xb5, 0x59, 0xcc, 0x16, 0xac, 0x09, 0xbf, 0x88,
	0x8a, 0xe6, 0x1d, 0x40, 0x57, 0x09, 0x39, 0x32, 0xdc, 0x24, 0x1a, 0xaf, 0xa1, 0x34, 0x51, 0x42,
	0x32, 0x6d, 0xa5, 0x6d, 0x5b, 0x69, 0x1f, 0xb6, 0xfe, 0x6c, 0xc6, 0xed, 0xe0, 0x67, 0x24, 0x84,
	0x49, 0x36, 0x7e, 0xf1, 0x04, 0xfe, 0xaa, 0x8f, 0x35, 0xa8, 0x46, 0x74, 0x40, 0x58, 0x9f, 0x0e,
	0x68, 0xc4, 0xc8, 0x73, 0x97, 0x90, 0x1e, 0xe9, 0xf9, 0x39, 0xdc, 0x83, 0xdd, 0x6e, 0x30, 0x18,
	0xd2, 0x7e, 0x27, 0xa2, 0xc1, 0x3d, 0x23, 0x61, 0x18, 0x84, 0xbe, 0x87, 0x55, 0xd8, 0x89, 0x02,
	0x76, 0x4b, 0x18, 0x79, 0xec, 0xf4, 0x1f, 0x3a, 0x11, 0xe9, 0xf9, 0xf9, 0x36, 0x85, 0xe2, 0x88,
	0xc7, 0x62, 0xac, 0x3e, 0xf1, 0x66, 0x71, 0x07, 0x93, 0xd6, 0xc6, 0xfd, 0xff, 0xbb, 0x35, 0x96,
	0xb8, 0x7b, 0x60, 0x33, 0x37, 0x2e, 0xd8, 0xdb, 0x5e, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x31,
	0x11, 0x1d, 0x3b, 0xfa, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SandboxClient is the client API for Sandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SandboxClient interface {
	// Submits code to sandbox service and receives status of code submission
	SubmitCode(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*CodeStatus, error)
}

type sandboxClient struct {
	cc *grpc.ClientConn
}

func NewSandboxClient(cc *grpc.ClientConn) SandboxClient {
	return &sandboxClient{cc}
}

func (c *sandboxClient) SubmitCode(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*CodeStatus, error) {
	out := new(CodeStatus)
	err := c.cc.Invoke(ctx, "/submission.Sandbox/SubmitCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServer is the server API for Sandbox service.
type SandboxServer interface {
	// Submits code to sandbox service and receives status of code submission
	SubmitCode(context.Context, *Submission) (*CodeStatus, error)
}

func RegisterSandboxServer(s *grpc.Server, srv SandboxServer) {
	s.RegisterService(&_Sandbox_serviceDesc, srv)
}

func _Sandbox_SubmitCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).SubmitCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submission.Sandbox/SubmitCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).SubmitCode(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sandbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "submission.Sandbox",
	HandlerType: (*SandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCode",
			Handler:    _Sandbox_SubmitCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submission/submission.proto",
}
